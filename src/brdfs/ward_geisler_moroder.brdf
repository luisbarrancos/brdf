analytic

# variables go here...
# only floats supported right now.
# [type] [name] [min val] [max val] [default val]

::begin parameters
float alpha_x 0 1.0 0.15
float alpha_y 0 1.0 0.15
color Cs 1 1 1
bool isotropic 0
::end parameters


# Then comes the shader. This should be GLSL code
# that defines a function called BRDF (although you can
# add whatever else you want too, like sqr() below).

::begin shader

float sqr( float x )
{
    return x*x;
}

// Bounding the Albedo of the Ward Reflectance Model
// D-Geisler-Moroder, and A.Dur

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    vec3 H = normalize(L + V);

    // specular
    float ax = alpha_x;
    float ay = isotropic ? alpha_x : alpha_y;

    float sqr_dot_nh = sqr( dot(H,N));
    float term_B = sqr( dot(H,X) / ax) + sqr( dot(H,Y) / ay);
    float term_A = 1 / sqr_dot_nh;
    float term_C = dot(H,H) / sqr(sqr_dot_nh);

    float spec = 1.0 / (4.0 * 3.14159265 * ax * ay) * term_C;
    spec *= exp( -term_A * term_B);

    return Cs * spec;
}

::end shader
